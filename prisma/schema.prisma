// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

type CustomTime {
  hours   Int
  minutes Int
}

type Ingredient {
  key   String
  name  String
  value Float
  unit  String
}

type Step {
  key String
  stepNumber Int
  description String
  note       String
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
  referentialIntegrity = "prisma"
}

generator client {
  provider = "prisma-client-js"
  previewFeatures = ["referentialIntegrity"]
}

// Necessary for Next auth
model Account {
    id                String  @id @default(auto()) @map("_id") @db.ObjectId
    type              String
    provider          String
    providerAccountId String
    refresh_token     String? @db.String
    access_token      String? @db.String
    expires_at        Int?
    token_type        String?
    scope             String?
    id_token          String? @db.String
    session_state     String?

    userId            String  @db.ObjectId
    user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@unique([provider, providerAccountId])
    @@map("accounts")
}

model Session {
    id           String   @id @default(auto()) @map("_id") @db.ObjectId
    
    sessionToken String   @unique
    expires      DateTime

    userId       String   @db.ObjectId
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@map("sessions")
}

model User {
    id            String    @id @default(auto()) @map("_id") @db.ObjectId
    createdAt     DateTime  @default(now())

    accounts      Account[]
    sessions      Session[]

    name          String?
    email         String?   
    emailVerified DateTime?
    username      String?   
    birthdate     DateTime?
    image         String?

    profile       Profile?
    books         Book[]
    recipes       Recipe[]
    

    @@unique([email])
    @@map("users")
}

model Profile {
  id          String    @id @default(auto()) @map("_id") @db.ObjectId
  
  name        String? 
  username    String?
  bio         String?
  email       String?
  emailVerified DateTime?
  image       String? 

  userId      String  @db.ObjectId
  user        User    @relation(fields: [userId], references: [id], onDelete: Cascade)
      
  @@unique([userId])
  @@map("profile")
}

model VerificationToken {
    id         String  @id @default(auto()) @map("_id") @db.ObjectId

    identifier String
    token      String   
    expires    DateTime

    @@unique([identifier, token])
    @@map("verificationTokens")
}

model Book {
    id          String  @id @default(auto()) @map("_id") @db.ObjectId
    createdAt   DateTime  @default(now())

    title       String
    description String?
    image       String? 

    recipeIds   String[] @db.ObjectId
    recipes     Recipe[] @relation(fields: [recipeIds], references: [id])

    userId      String  @db.ObjectId
    user        User    @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@map("books")
}

model Recipe {
    id               String  @id @default(auto()) @map("_id") @db.ObjectId
    createdAt        DateTime  @default(now())

    title            String
    description      String
    prepTime         CustomTime
    cookTime         CustomTime
    numberOfServings Int
    ingredients      Ingredient[]
    steps            Step[]

    bookIds          String[] @db.ObjectId
    books            Book[] @relation(fields: [bookIds], references: [id])

    userId           String  @db.ObjectId
    user             User    @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@map("recipes")
}

